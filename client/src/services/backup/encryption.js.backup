// client/src/services/encryption.js
import CryptoJS from 'crypto-js';

/**
 * Service de cryptage avancé avec plusieurs couches de sécurité
 * Implémente:
 * - RSA-OAEP 4096 bits pour l'échange de clés
 * - AES-GCM 256 bits pour le chiffrement symétrique des messages
 * - Signatures numériques pour l'authenticité
 * - Perfect forward secrecy avec Diffie-Hellman
 * - Mécanisme de rotation des clés
 * - Protection contre les attaques par force brute
 */

// Constantes cryptographiques
const KEY_SIZE = 4096; // Taille des clés RSA en bits
const PBKDF2_ITERATIONS = 100000; // Nombre d'itérations pour la dérivation de clé
const AES_KEY_SIZE = 256; // Taille des clés AES en bits
const AUTH_TAG_SIZE = 128; // Taille du tag d'authentification en bits

/**
 * Génère une paire de clés RSA 4096 bits avec sauvegarde sécurisée
 * @returns {Promise<Object>} - Objet contenant les clés publique et privée
 */
export const generateKeyPair = async () => {
  try {
    // Vérifier si l'API Web Crypto est disponible
    if (window.crypto && window.crypto.subtle) {
      const crypto = window.crypto;
      const subtle = crypto.subtle;
      
      console.log("Génération de clés RSA-OAEP 4096 bits en cours...");
      
      // Génération de la paire de clés RSA 4096 bits
      const keyPair = await subtle.generateKey(
        {
          name: 'RSA-OAEP',
          modulusLength: KEY_SIZE, // 4096 bits pour une sécurité maximale
          publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // 65537
          hash: 'SHA-512', // Utilisation de SHA-512 au lieu de SHA-256
        },
        true, // extractable
        ['encrypt', 'decrypt', 'wrapKey', 'unwrapKey']
      );
      
      // Génération d'une paire ECDH pour la perfect forward secrecy
      const ecdhKeyPair = await subtle.generateKey(
        {
          name: 'ECDH',
          namedCurve: 'P-521', // courbe elliptique P-521 (la plus sécurisée)
        },
        true,
        ['deriveKey', 'deriveBits']
      );
      
      // Génération d'une paire de clés de signature pour l'authenticité
      const signatureKeyPair = await subtle.generateKey(
        {
          name: 'ECDSA',
          namedCurve: 'P-384',
        },
        true,
        ['sign', 'verify']
      );
      
      // Exportation des clés
      const rsaPublicKey = await subtle.exportKey('spki', keyPair.publicKey);
      const rsaPrivateKey = await subtle.exportKey('pkcs8', keyPair.privateKey);
      const ecdhPublicKey = await subtle.exportKey('spki', ecdhKeyPair.publicKey);
      const ecdhPrivateKey = await subtle.exportKey('pkcs8', ecdhKeyPair.privateKey);
      const signPublicKey = await subtle.exportKey('spki', signatureKeyPair.publicKey);
      const signPrivateKey = await subtle.exportKey('pkcs8', signatureKeyPair.privateKey);
      
      // Génération d'un sel aléatoire pour la protection des clés
      const salt = crypto.getRandomValues(new Uint8Array(32));
      
      // Création d'un bundle de clés
      const keyBundle = {
        rsaPublicKey: arrayBufferToBase64(rsaPublicKey),
        rsaPrivateKey: arrayBufferToBase64(rsaPrivateKey),
        ecdhPublicKey: arrayBufferToBase64(ecdhPublicKey),
        ecdhPrivateKey: arrayBufferToBase64(ecdhPrivateKey),
        signPublicKey: arrayBufferToBase64(signPublicKey),
        signPrivateKey: arrayBufferToBase64(signPrivateKey),
        salt: arrayBufferToBase64(salt),
        timestamp: Date.now(),
        version: '2.0',
        keyRotationDue: Date.now() + (90 * 24 * 60 * 60 * 1000) // 90 jours
      };
      
      // Préparer le bundle public qui sera partagé
      const publicBundle = {
        rsaPublicKey: keyBundle.rsaPublicKey,
        ecdhPublicKey: keyBundle.ecdhPublicKey,
        signPublicKey: keyBundle.signPublicKey,
        timestamp: keyBundle.timestamp,
        version: keyBundle.version
      };
      
      return {
        publicKey: JSON.stringify(publicBundle),
        privateKey: JSON.stringify(keyBundle)
      };
    } else {
      throw new Error("L'API Web Crypto n'est pas disponible sur ce navigateur");
    }
  } catch (error) {
    console.error('Erreur lors de la génération des clés:', error);
    throw new Error('Échec de la génération des clés de chiffrement');
  }
};

/**
 * Chiffre un message avec plusieurs couches de sécurité
 * @param {string} message - Message à chiffrer
 * @param {string} recipientPublicKeyJson - Clé publique du destinataire (JSON)
 * @returns {Promise<Object>} - Objet contenant le message chiffré et les métadonnées
 */
export const encryptMessage = async (message, recipientPublicKeyJson) => {
  try {
    if (!message || !recipientPublicKeyJson) {
      throw new Error('Message ou clé publique manquant');
    }
    
    const crypto = window.crypto;
    const subtle = crypto.subtle;
    
    // Parsing de la clé publique du destinataire
    const recipientPublicBundle = JSON.parse(recipientPublicKeyJson);
    
    // Import de la clé RSA du destinataire
    const recipientRsaPublicKey = await subtle.importKey(
      'spki',
      base64ToArrayBuffer(recipientPublicBundle.rsaPublicKey),
      {
        name: 'RSA-OAEP',
        hash: 'SHA-512',
      },
      false,
      ['encrypt', 'wrapKey']
    );
    
    // Import de la clé ECDH du destinataire pour la perfect forward secrecy
    const recipientEcdhPublicKey = await subtle.importKey(
      'spki',
      base64ToArrayBuffer(recipientPublicBundle.ecdhPublicKey),
      {
        name: 'ECDH',
        namedCurve: 'P-521',
      },
      false,
      []
    );
    
    // Génération d'une clé symétrique AES-GCM unique pour ce message
    const messageKey = await subtle.generateKey(
      {
        name: 'AES-GCM',
        length: AES_KEY_SIZE,
      },
      true,
      ['encrypt', 'decrypt']
    );
    
    // Génération d'une paire ECDH éphémère pour ce message (perfect forward secrecy)
    const ephemeralEcdhKey = await subtle.generateKey(
      {
        name: 'ECDH',
        namedCurve: 'P-521',
      },
      true,
      ['deriveKey', 'deriveBits']
    );
    
    // Dérivation d'une clé partagée avec la clé ECDH du destinataire
    const sharedSecretBits = await subtle.deriveBits(
      {
        name: 'ECDH',
        public: recipientEcdhPublicKey,
      },
      ephemeralEcdhKey.privateKey,
      512 // 512 bits
    );
    
    // Conversion des bits partagés en clé AES
    const sharedKey = await subtle.importKey(
      'raw',
      sharedSecretBits,
      {
        name: 'AES-GCM',
        length: AES_KEY_SIZE,
      },
      false,
      ['encrypt', 'decrypt']
    );
    
    // Génération d'un vecteur d'initialisation (IV) aléatoire
    const iv = crypto.getRandomValues(new Uint8Array(12));
    
    // Chiffrement du message avec la clé AES-GCM unique
    const messageBytes = new TextEncoder().encode(message);
    const encryptedMessageBuffer = await subtle.encrypt(
      {
        name: 'AES-GCM',
        iv: iv,
        additionalData: new TextEncoder().encode('murmur-auth-v2'), // Données d'authentification supplémentaires
        tagLength: AUTH_TAG_SIZE
      },
      messageKey,
      messageBytes
    );
    
    // Exportation de la clé AES-GCM pour le chiffrement
    const rawMessageKey = await subtle.exportKey('raw', messageKey);
    
    // Double chiffrement : La clé du message est chiffrée avec la clé partagée ECDH
    const encryptedKeyWithEcdh = await subtle.encrypt(
      {
        name: 'AES-GCM',
        iv: crypto.getRandomValues(new Uint8Array(12)),
        additionalData: new TextEncoder().encode('key-wrapping-v2'),
        tagLength: AUTH_TAG_SIZE
      },
      sharedKey,
      rawMessageKey
    );
    
    // La clé chiffrée est ensuite chiffrée avec la clé RSA du destinataire
    const encryptedKeyWithRsa = await subtle.encrypt(
      {
        name: 'RSA-OAEP'
      },
      recipientRsaPublicKey,
      encryptedKeyWithEcdh
    );
    
    // Exportation de la clé publique ECDH éphémère
    const ephemeralPublicKey = await subtle.exportKey('spki', ephemeralEcdhKey.publicKey);
    
    // Ajout d'informations d'horodatage et de sécurité
    const encryptionMetadata = {
      algorithm: 'RSA-OAEP-4096 + ECDH-P521 + AES-GCM-256',
      timestamp: Date.now(),
      ephemeralPublicKey: arrayBufferToBase64(ephemeralPublicKey),
      iv: arrayBufferToBase64(iv),
      authTagSize: AUTH_TAG_SIZE,
      version: '2.0'
    };
    
    // Construction du paquet chiffré final
    return {
      encryptedMessage: arrayBufferToBase64(encryptedMessageBuffer),
      encryptedKey: arrayBufferToBase64(encryptedKeyWithRsa),
      metadata: JSON.stringify(encryptionMetadata)
    };
  } catch (error) {
    console.error('Erreur lors du chiffrement du message:', error);
    throw new Error('Échec du chiffrement du message');
  }
};

/**
 * Déchiffre un message avec vérification d'intégrité
 * @param {string} encryptedMessageBase64 - Message chiffré en Base64
 * @param {string} encryptedKeyBase64 - Clé chiffrée en Base64
 * @param {string} metadataJson - Métadonnées de chiffrement en JSON
 * @param {string} privateKeyJson - Clé privée de l'utilisateur en JSON
 * @returns {Promise<string>} - Message déchiffré
 */
export const decryptMessage = async (encryptedMessageBase64, encryptedKeyBase64, metadataJson, privateKeyJson) => {
  try {
    if (!privateKeyJson) {
      throw new Error('Clé privée non disponible');
    }
    
    const crypto = window.crypto;
    const subtle = crypto.subtle;
    
    // Parsing des données
    const privateKeyBundle = JSON.parse(privateKeyJson);
    const metadata = JSON.parse(metadataJson);
    
    // Import de la clé RSA privée
    const privateKey = await subtle.importKey(
      'pkcs8',
      base64ToArrayBuffer(privateKeyBundle.rsaPrivateKey),
      {
        name: 'RSA-OAEP',
        hash: 'SHA-512',
      },
      false,
      ['decrypt', 'unwrapKey']
    );
    
    // Import de la clé ECDH privée
    const ecdhPrivateKey = await subtle.importKey(
      'pkcs8',
      base64ToArrayBuffer(privateKeyBundle.ecdhPrivateKey),
      {
        name: 'ECDH',
        namedCurve: 'P-521',
      },
      false,
      ['deriveKey', 'deriveBits']
    );
    
    // Import de la clé ECDH éphémère publique de l'expéditeur
    const ephemeralPublicKey = await subtle.importKey(
      'spki',
      base64ToArrayBuffer(metadata.ephemeralPublicKey),
      {
        name: 'ECDH',
        namedCurve: 'P-521',
      },
      false,
      []
    );
    
    // Déchiffrement de la clé chiffrée avec RSA
    const encryptedKeyWithEcdh = await subtle.decrypt(
      {
        name: 'RSA-OAEP'
      },
      privateKey,
      base64ToArrayBuffer(encryptedKeyBase64)
    );
    
    // Dérivation de la clé partagée avec la clé ECDH éphémère
    const sharedSecretBits = await subtle.deriveBits(
      {
        name: 'ECDH',
        public: ephemeralPublicKey,
      },
      ecdhPrivateKey,
      512 // 512 bits
    );
    
    // Conversion des bits partagés en clé AES
    const sharedKey = await subtle.importKey(
      'raw',
      sharedSecretBits,
      {
        name: 'AES-GCM',
        length: AES_KEY_SIZE,
      },
      false,
      ['encrypt', 'decrypt']
    );
    
    // Déchiffrement de la clé de message avec la clé partagée ECDH
    const messageKeyRaw = await subtle.decrypt(
      {
        name: 'AES-GCM',
        iv: base64ToArrayBuffer(metadata.iv.slice(0, 16)), // Utiliser les 16 premiers octets comme IV
        additionalData: new TextEncoder().encode('key-wrapping-v2'),
        tagLength: AUTH_TAG_SIZE
      },
      sharedKey,
      encryptedKeyWithEcdh
    );
    
    // Import de la clé de message
    const messageKey = await subtle.importKey(
      'raw',
      messageKeyRaw,
      {
        name: 'AES-GCM',
        length: AES_KEY_SIZE,
      },
      false,
      ['decrypt']
    );
    
    // Déchiffrement du message avec la clé AES-GCM
    const decryptedBuffer = await subtle.decrypt(
      {
        name: 'AES-GCM',
        iv: base64ToArrayBuffer(metadata.iv),
        additionalData: new TextEncoder().encode('murmur-auth-v2'),
        tagLength: AUTH_TAG_SIZE
      },
      messageKey,
      base64ToArrayBuffer(encryptedMessageBase64)
    );
    
    // Conversion du buffer en texte
    const decryptedMessage = new TextDecoder().decode(decryptedBuffer);
    
    return decryptedMessage;
  } catch (error) {
    console.error('Erreur lors du déchiffrement du message:', error);
    throw new Error('Échec du déchiffrement du message');
  }
};

/**
 * Vérifie si une clé privée doit être renouvelée
 * @param {string} privateKeyJson - Clé privée au format JSON
 * @returns {boolean} - True si la clé doit être renouvelée
 */
export const shouldRotateKeys = (privateKeyJson) => {
  try {
    const keyBundle = JSON.parse(privateKeyJson);
    const now = Date.now();
    
    // La clé doit être renouvelée si elle approche de sa date d'expiration
    if (keyBundle.keyRotationDue && keyBundle.keyRotationDue < (now + 7 * 24 * 60 * 60 * 1000)) {
      return true;
    }
    
    // La clé doit être renouvelée si elle utilise une version obsolète
    if (keyBundle.version !== '2.0') {
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('Erreur lors de la vérification de la rotation des clés:', error);
    return true; // En cas de doute, renouveler les clés
  }
};

/**
 * Utilise PBKDF2 pour dériver une clé forte à partir d'un mot de passe
 * @param {string} password - Mot de passe
 * @param {Uint8Array} salt - Sel cryptographique
 * @returns {Promise<CryptoKey>} - Clé dérivée
 */
export const deriveKeyFromPassword = async (password, salt) => {
  try {
    const subtle = window.crypto.subtle;
    const passwordBuffer = new TextEncoder().encode(password);
    
    // Import de la clé basée sur le mot de passe
    const baseKey = await subtle.importKey(
      'raw',
      passwordBuffer,
      'PBKDF2',
      false,
      ['deriveKey']
    );
    
    // Dérivation d'une clé AES-GCM à partir du mot de passe
    const derivedKey = await subtle.deriveKey(
      {
        name: 'PBKDF2',
        salt: salt,
        iterations: PBKDF2_ITERATIONS,
        hash: 'SHA-512'
      },
      baseKey,
      {
        name: 'AES-GCM',
        length: AES_KEY_SIZE
      },
      true,
      ['encrypt', 'decrypt']
    );
    
    return derivedKey;
  } catch (error) {
    console.error('Erreur lors de la dérivation de clé:', error);
    throw new Error('Échec de la dérivation de clé');
  }
};

/**
 * Signe un message avec la clé privée de l'utilisateur pour l'authenticité
 * @param {string} message - Message à signer
 * @param {string} privateKeyJson - Clé privée au format JSON
 * @returns {Promise<string>} - Signature au format Base64
 */
export const signMessage = async (message, privateKeyJson) => {
  try {
    const subtle = window.crypto.subtle;
    const keyBundle = JSON.parse(privateKeyJson);
    
    // Import de la clé de signature
    const signPrivateKey = await subtle.importKey(
      'pkcs8',
      base64ToArrayBuffer(keyBundle.signPrivateKey),
      {
        name: 'ECDSA',
        namedCurve: 'P-384'
      },
      false,
      ['sign']
    );
    
    // Création de la signature
    const messageBuffer = new TextEncoder().encode(message);
    const signatureBuffer = await subtle.sign(
      {
        name: 'ECDSA',
        hash: 'SHA-384'
      },
      signPrivateKey,
      messageBuffer
    );
    
    return arrayBufferToBase64(signatureBuffer);
  } catch (error) {
    console.error('Erreur lors de la signature du message:', error);
    throw new Error('Échec de la signature du message');
  }
};

/**
 * Vérifie la signature d'un message
 * @param {string} message - Message original
 * @param {string} signature - Signature au format Base64
 * @param {string} publicKeyJson - Clé publique au format JSON
 * @returns {Promise<boolean>} - True si la signature est valide
 */
export const verifySignature = async (message, signature, publicKeyJson) => {
  try {
    const subtle = window.crypto.subtle;
    const publicKeyBundle = JSON.parse(publicKeyJson);
    
    // Import de la clé de vérification
    const signPublicKey = await subtle.importKey(
      'spki',
      base64ToArrayBuffer(publicKeyBundle.signPublicKey),
      {
        name: 'ECDSA',
        namedCurve: 'P-384'
      },
      false,
      ['verify']
    );
    
    // Vérification de la signature
    const messageBuffer = new TextEncoder().encode(message);
    const isValid = await subtle.verify(
      {
        name: 'ECDSA',
        hash: 'SHA-384'
      },
      signPublicKey,
      base64ToArrayBuffer(signature),
      messageBuffer
    );
    
    return isValid;
  } catch (error) {
    console.error('Erreur lors de la vérification de la signature:', error);
    return false;
  }
};

// Fonctions utilitaires

/**
 * Convertit un ArrayBuffer en chaîne Base64
 * @param {ArrayBuffer} buffer - ArrayBuffer à convertir
 * @returns {string} - Chaîne Base64
 */
function arrayBufferToBase64(buffer) {
  const bytes = new Uint8Array(buffer);
  let binary = '';
  for (let i = 0; i < bytes.byteLength; i++) {
    binary += String.fromCharCode(bytes[i]);
  }
  return window.btoa(binary);
}

/**
 * Convertit une chaîne Base64 en ArrayBuffer
 * @param {string} base64 - Chaîne Base64
 * @returns {ArrayBuffer} - ArrayBuffer correspondant
 */
function base64ToArrayBuffer(base64) {
  const binaryString = window.atob(base64);
  const bytes = new Uint8Array(binaryString.length);
  for (let i = 0; i < binaryString.length; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  return bytes.buffer;
}

/**
 * Convertit un ArrayBuffer en objet WordArray de CryptoJS
 * @param {ArrayBuffer} buffer - ArrayBuffer à convertir
 * @returns {Object} - WordArray de CryptoJS
 */
function arrayBufferToWordArray(buffer) {
  const words = [];
  const uint8View = new Uint8Array(buffer);
  
  for (let i = 0; i < uint8View.length; i += 4) {
    words.push(
      (uint8View[i] << 24) |
      ((i + 1 < uint8View.length) ? uint8View[i + 1] << 16 : 0) |
      ((i + 2 < uint8View.length) ? uint8View[i + 2] << 8 : 0) |
      ((i + 3 < uint8View.length) ? uint8View[i + 3] : 0)
    );
  }
  
  return CryptoJS.lib.WordArray.create(words, uint8View.length);
}